public final class Validator
{
  public static boolean IsChinese(String paramString)
  {
    return match("^[一-龥]+", paramString);
  }

  public static boolean IsContainJson(String paramString)
  {
    String str1 = "(\\{([^\\{\\}]*" + "(\\{[^\\{\\}]*\\})" + "*[^\\{\\}]*)+\\})";
    String str2 = "(\\{([^\\{\\}]*" + str1 + "*[^\\{\\}]*)+\\})";
    String str3 = "(\\{([^\\{\\}]*" + str2 + "*[^\\{\\}]*)+\\})";
    return match("[^\\{\\}]*" + str3 + "+[^\\{\\}]*$", paramString);
  }

  public static boolean IsDay(String paramString)
  {
    return match("^((0?[1-9])|((1|2)[0-9])|30|31)$", paramString);
  }

  public static boolean IsDecimal(String paramString)
  {
    return match("^[0-9]+(.[0-9]{2})?$", paramString);
  }

  public static boolean IsDingDingCoupon(String paramString)
  {
    return match("\\[PID:[A-Za-z0-9]+", paramString);
  }

  public static boolean IsHandset(String paramString)
  {
    return match("^1[3,4,5,8]\\d{9}$", paramString);
  }

  public static boolean IsIDcard(String paramString)
  {
    return match("(^\\d{18}$)|(^\\d{15}$)", paramString);
  }

  public static boolean IsIntNumber(String paramString)
  {
    return match("^\\+?[1-9][0-9]*$", paramString);
  }

  public static boolean IsLetter(String paramString)
  {
    return match("^[0-9A-Za-z一-龥\\(\\)_.-]+$", paramString);
  }

  public static boolean IsLetterOrNumber(String paramString)
  {
    return match("^[0-9A-Za-z]", paramString);
  }

  public static boolean IsLowChar(String paramString)
  {
    return match("^[a-z]+$", paramString);
  }

  public static boolean IsMonth(String paramString)
  {
    return match("^(0?[[1-9]|1[0-2])$", paramString);
  }

  public static boolean IsNumber(String paramString)
  {
    return match("^[0-9]*$", paramString);
  }

  public static boolean IsPasswLength(String paramString)
  {
    return match("^\\d{6,18}$", paramString);
  }

  public static boolean IsPassword(String paramString)
  {
    return match("[A-Za-z]+[0-9]", paramString);
  }

  public static boolean IsPostalcode(String paramString)
  {
    return match("^\\d{6}$", paramString);
  }

  public static boolean IsTelephone(String paramString)
  {
    return match("^(\\+)?(\\d{2,4}-)?(\\d{2,4}-)?\\d{3,20}(-\\d{2,4})?$", paramString);
  }

  public static boolean IsUpChar(String paramString)
  {
    return match("^[A-Z]+$", paramString);
  }

  public static boolean IsUrl(String paramString)
  {
    String str = "(" + "(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)" + "\\." + "(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)" + "\\." + "(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)" + "\\." + "(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)" + "))";
    return match("[hH][tT][tT][pP]([sS])?[:：]//(([0-9A-Za-z]([\\w-]*\\.)+[A-Za-z]+)|" + str + "(?::(\\d{1,5}))?(/[\\w- ./?!%&=#:~]*)?", paramString);
  }

  public static boolean IsUrl2(String paramString)
  {
    return match("[hH][tT][tT][pP]([sS])?[:：]//([\\w-]+\\.)+[\\w-]+(?::(\\d{1,5}))?(/[\\w- ./?!%&=#$_:~'@;,*+()\\[\\]]*)?", paramString);
  }

  public static boolean isDate(String paramString)
  {
    return match("^((((1[6-9]|[2-9]\\d)\\d{2})-(0?[13578]|1[02])-(0?[1-9]|[12]\\d|3[01]))|(((1[6-9]|[2-9]\\d)\\d{2})-(0?[13456789]|1[012])-(0?[1-9]|[12]\\d|30))|(((1[6-9]|[2-9]\\d)\\d{2})-0?2-(0?[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29-)) (20|21|22|23|[0-1]?\\d):[0-5]?\\d:[0-5]?\\d$", paramString);
  }

  public static boolean isEffective(String paramString)
  {
    if ((paramString == null) || ("".equals(paramString)) || (" ".equals(paramString)));
    for (boolean bool = false; ; bool = true)
      return bool;
  }

  public static boolean isEmail(String paramString)
  {
    return match("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$", paramString);
  }

  public static boolean isIP(String paramString)
  {
    return match("^" + "(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)" + "\\." + "(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)" + "\\." + "(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)" + "\\." + "(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)" + "$", paramString);
  }

  private static boolean match(String paramString1, String paramString2)
  {
    int i;
    if (paramString2 == null)
      i = 0;
    while (true)
    {
      return i;
      if (paramString1 == null)
        int j = 1;
      else
        boolean bool = Pattern.compile(paramString1).matcher(paramString2).matches();
    }
  }
}
